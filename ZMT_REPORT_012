*&---------------------------------------------------------------------*
*& Report ZMT_REPORT_012
*&---------------------------------------------------------------------*
*&
*&---------------------------------------------------------------------*
REPORT zmt_report_012.

TYPES: BEGIN OF gty_sflg.
  INCLUDE STRUCTURE sflight.
*TYPES: traffic_light TYPE c LENGTH 1.
TYPES: traffic_light TYPE icon-id.
TYPES: END OF gty_sflg.

DATA: go_alvgrid   TYPE REF TO cl_gui_alv_grid,
      go_container TYPE REF TO cl_gui_custom_container,
      gt_list      TYPE TABLE OF gty_sflg,
      gs_list      TYPE gty_sflg,
      gt_fieldcat  TYPE lvc_t_fcat,
      gs_fieldcat  TYPE lvc_s_fcat,
      gs_layout    TYPE lvc_s_layo.

START-OF-SELECTION.

CALL SCREEN 100.

MODULE status_0100 OUTPUT.
  SET PF-STATUS '0100'.
  SET TITLEBAR '0100'.

  PERFORM select_data.
  PERFORM open_traffic_lights.
  PERFORM fcat.
  PERFORM layout.
  PERFORM show.

ENDMODULE.

MODULE user_command_0100 INPUT.

  DATA: lt_selected_rows TYPE lvc_t_roid,
        ls_selected_row  TYPE lvc_s_roid,
        lt_selected_cells TYPE lvc_t_cell,
        ls_selected_cells TYPE lvc_s_cell,
        lt_list          TYPE TABLE OF gty_sflg,
        ls_list          TYPE gty_sflg,
        lt_index_columns TYPE lvc_t_col,
        ls_index_columns TYPE lvc_s_col,
        lv_color         TYPE lvc_emphsz,
        lv_answer        TYPE c LENGTH 1,
        lt_filter        TYPE lvc_t_filt,
        ls_filter        TYPE lvc_s_filt.

  CASE sy-ucomm.
    " Leave the program
    WHEN '&BACK'.
      SET SCREEN 0.

    " Delete selected row/rows in the table.
    WHEN 'DELETE'.
      go_alvgrid->get_selected_rows(
        IMPORTING
          et_row_no = lt_selected_rows   " Indexes of Selected Rows
      ).

      lt_list = gt_list.

      LOOP AT lt_selected_rows INTO ls_selected_row.
        READ TABLE lt_list INTO ls_list INDEX ls_selected_row-row_id.
        IF sy-subrc IS INITIAL.
          DELETE gt_list WHERE carrid = ls_list-carrid.
        ENDIF.
      ENDLOOP.
    WHEN 'RESET'.
      " Clear the data, field catalog, filter settings and layout
      CLEAR: gt_list, gt_fieldcat, gs_fieldcat, gs_layout, lt_filter, ls_filter.
      " Re-select the data
      PERFORM select_data.

    WHEN 'K_RENK'.
    go_alvgrid->get_selected_columns(
      IMPORTING
        et_index_columns = lt_index_columns
    ).

    IF lt_index_columns IS NOT INITIAL.
      CALL FUNCTION 'ZMK_COLOR_SELECTION'
       IMPORTING
         ev_color        = lv_color
         ev_answer       = lv_answer  .

      IF lv_answer IS INITIAL AND lv_color IS NOT INITIAL.

       LOOP AT lt_index_columns INTO ls_index_columns.
         READ TABLE gt_fieldcat INTO gs_fieldcat WITH KEY fieldname = ls_index_columns-fieldname.
         IF sy-subrc IS INITIAL.
           gs_fieldcat-emphasize = lv_color.
           MODIFY gt_fieldcat FROM gs_fieldcat TRANSPORTING emphasize WHERE fieldname = gs_fieldcat-fieldname.
         ENDIF.
       ENDLOOP.
      ENDIF.
    ELSE.
      MESSAGE 'You have to choose at least one column.' TYPE 'I'.
    ENDIF.

    WHEN 'FILTER'.
      go_alvgrid->get_selected_cells(
        IMPORTING
          et_cell = lt_selected_cells
      ).

      IF lines( lt_selected_cells ) = 1.
        READ TABLE lt_selected_cells INTO ls_selected_cells INDEX 1.
        IF sy-subrc IS INITIAL.
          IF ls_selected_cells-col_id EQ 'PRICE'.
            READ TABLE gt_list INTO ls_list INDEX ls_selected_cells-row_id.
            IF sy-subrc IS INITIAL.
              ls_filter-fieldname = ls_selected_cells-col_id.
              ls_filter-sign = 'I'.
              ls_filter-option = 'EQ'.
              ls_filter-low = ls_list-price.

              APPEND ls_filter TO lt_filter.
            ENDIF.
            " Price sütununu kontrolü hatas#
            ELSE.
            MESSAGE | Please select just Price column's cells | TYPE 'I'.
            exit.
          ENDIF.
        ENDIF.
        ELSE.
          MESSAGE 'Sadece 1 hücre seçiniz' TYPE 'S' DISPLAY LIKE 'E'.
      ENDIF.
  ENDCASE.
ENDMODULE.

FORM select_data .
  IF gt_list IS INITIAL.
    SELECT * FROM sflight INTO CORRESPONDING FIELDS OF TABLE gt_list.
  ENDIF.
ENDFORM.

FORM fcat .

  IF gt_fieldcat IS INITIAL.
    CALL FUNCTION 'LVC_FIELDCATALOG_MERGE'
     EXPORTING
       i_structure_name             = 'SFLIGHT'
       i_client_never_display       = 'X'
       i_bypassing_buffer           = abap_true
      CHANGING
        ct_fieldcat                 = gt_fieldcat
     EXCEPTIONS
       inconsistent_interface       = 1
       program_error                = 2
       OTHERS                       = 3.
    CASE sy-subrc.
      WHEN 1.
        MESSAGE 'Call parameter combination error.' TYPE 'E'.
        EXIT.
      WHEN 2.
        MESSAGE 'Program error.' TYPE 'E'.
        EXIT.
      WHEN 3.
        MESSAGE 'Unspecified error.' TYPE 'E'.
        EXIT.
    ENDCASE.

*    " Customize the field catalog entry for the traffic light field
*    READ TABLE gt_fieldcat INTO gs_fieldcat WITH KEY fieldname = 'TRAFFIC_LIGHT'.
*    IF sy-subrc IS INITIAL.
*      gs_fieldcat-emphasize = 'C'.  " Set the emphasize flag to 'C' (Color)
*      gs_fieldcat-icon      = abap_true.  " Set the field as an icon field
*      MODIFY gt_fieldcat FROM gs_fieldcat TRANSPORTING emphasize icon WHERE fieldname = 'TRAFFIC_LIGHT'.
*    ENDIF.

  IF sy-subrc IS NOT INITIAL.
    BREAK-POINT.
  ENDIF.

  gs_fieldcat-fieldname = 'TRAFFIC_LIGHT'.
  gs_fieldcat-col_pos   = '9'.
  gs_fieldcat-scrtext_m = 'Ticket Situation'.

  APPEND gs_fieldcat TO gt_fieldcat.
  CLEAR: gs_fieldcat.

  ENDIF.

ENDFORM.


FORM layout .
  gs_layout-zebra = abap_true.
  gs_layout-cwidth_opt = abap_true.
  gs_layout-sel_mode = 'A'. " 'A' allows multiple selection; use 'B' for single selection
*  gs_layout-excp_fname = 'TRAFFIC_LIGHT'.
ENDFORM.

FORM show .
*  Initialization Phase: If the ALV grid doesn't exist,
*   the container and ALV grid objects are created,
*   and the ALV grid is displayed with the initial data.

  " First step - Define container
  IF go_alvgrid IS INITIAL.
    CREATE OBJECT go_container
      EXPORTING
        container_name              =  'CUSTOM_CONTROL_PANEL'
      EXCEPTIONS
        cntl_error                  = 1
        cntl_system_error           = 2
        create_error                = 3
        lifetime_error              = 4
        lifetime_dynpro_dynpro_link = 5
        OTHERS                      = 6.
      IF sy-subrc <> 0.
       MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
                  WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
       LEAVE PROGRAM.
      ENDIF.
    " Create the ALV grid object
    CREATE OBJECT go_alvgrid
      EXPORTING
        i_parent          =  go_container
      EXCEPTIONS
        error_cntl_create = 1
        error_cntl_init   = 2
        error_cntl_link   = 3
        error_dp_create   = 4
        OTHERS            = 5.
    IF sy-subrc <> 0.
     MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
                WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
     LEAVE PROGRAM.
    ENDIF.

    " Display the ALV grid.
    go_alvgrid->set_table_for_first_display(
      EXPORTING
        is_layout                     =  gs_layout   " Layout
      CHANGING
        it_outtab                     =  gt_list   " Output Table
        it_fieldcatalog               =  gt_fieldcat  " Field Catalog
      EXCEPTIONS
        invalid_parameter_combination = 1
        program_error                 = 2
        too_many_lines                = 3
        OTHERS                        = 4 ).
    IF sy-subrc <> 0.
     MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
                WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
     LEAVE PROGRAM.
    ENDIF.

*  Refresh Phase: If the ALV grid already exists, the data is refreshed,
*    keeping the display settings stable using the ls_stable structure.
*    This ensures that user-applied settings (like sorting and filtering) are not lost during the refresh.
  ELSE.

    " We applied some frontend changes as coloring the columns etc therefore we need to use to 2 codes blocks.
    go_alvgrid->set_frontend_fieldcatalog( it_fieldcatalog =  gt_fieldcat ).
    go_alvgrid->set_frontend_layout( is_layout = gs_layout ).

    " For filter
    go_alvgrid->set_filter_criteria(
      EXPORTING
        it_filter                 = lt_filter
      EXCEPTIONS
        no_fieldcatalog_available = 1
        OTHERS                    = 2
    ).
    IF sy-subrc <> 0.
     MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
                WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    ENDIF.

    " Define stability structure
*    DATA: ls_stable TYPE lvc_s_stbl.
*    ls_stable-row = 'X'.  " Keep rows stable
*    ls_stable-col = 'X'.  " Keep columns stable

*     Refresh the ALV grid display
    go_alvgrid->refresh_table_display(
*      EXPORTING
*        is_stable      = ls_stable  " Keep the sort/filter/grouping settings stable
      EXCEPTIONS
        finished       = 1
        OTHERS         = 2 ).
    IF sy-subrc <> 0.
     MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
                WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
     LEAVE PROGRAM.
    ENDIF.
  ENDIF.

ENDFORM.

FORM open_traffic_lights .

  DATA: lv_decimal TYPE p DECIMALS 1.

  LOOP AT gt_list INTO gs_list.
    lv_decimal = gs_list-seatsocc / gs_list-seatsmax.

    IF lv_decimal >= ( 80 / 100 ) .
*      gs_list-traffic_light = '1'. " Red traffic light
      gs_list-traffic_light = '@0A@'. " Red traffic light

    ELSEIF lv_decimal >= ( 40 / 100 ) AND lv_decimal < ( 80 / 100 ).
*      gs_list-traffic_light = '2'. " Yellow traffic light
      gs_list-traffic_light = '@09@'. " Yellow traffic light

    ELSE.
*      gs_list-traffic_light = '3'. " Green traffic light
      gs_list-traffic_light = '@08@'. " Green traffic light

    ENDIF.

    MODIFY gt_list FROM gs_list TRANSPORTING traffic_light
      WHERE carrid = gs_list-carrid
        AND connid = gs_list-connid
        AND fldate = gs_list-fldate.

  ENDLOOP.

ENDFORM.
